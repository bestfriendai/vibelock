rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users: public read; writes restricted to owner
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Reviews: public read; creation requires authorId == auth.uid; updates by author only,
    // except like/dislike counters which any authenticated user may update.
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.auth.uid != null
        && request.resource.data.authorId == request.auth.uid;

      // Allow author to update any field, or any authed user to update only like/dislike counters
      allow update: if request.auth != null && (
        // Owner full update
        request.auth.uid == resource.data.authorId ||
        // Limited community counters update (only like/dislike)
        (
          // Only like/dislike fields may be written
          request.writeFields.size() == (("likeCount" in request.writeFields ? 1 : 0) + ("dislikeCount" in request.writeFields ? 1 : 0))
        )
      );

      // Only the author can delete
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;

      // Comments within reviews
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null
          && request.auth.uid != null
          && request.resource.data.authorId == request.auth.uid;
        // Allow like/dislike updates by any authed user (and updatedAt)
        allow update: if request.auth != null && (
          request.writeFields.size() == (("likeCount" in request.writeFields ? 1 : 0) + ("dislikeCount" in request.writeFields ? 1 : 0))
        );
        // Only the comment author can delete
        allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
      }
    }

    // Chat rooms are publicly readable; writes restricted (basic) for app flow.
    match /chatRooms/{roomId} {
      allow read: if true;
      // Allow authenticated users to update lastActivity/lastMessage only
      allow write: if request.auth != null && (
        // Restrict writes to these fields to support sendMessage flow
        request.writeFields.size() <= 2 ||
        // Allow creation by admins in future; currently keep minimal
        false
      );

      // Messages within chat rooms
      match /messages/{messageId} {
        allow read: if true;
        allow create: if request.auth != null
          && request.auth.uid != null
          && request.auth.uid == request.resource.data.senderId;
        allow update, delete: if false;
      }
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
